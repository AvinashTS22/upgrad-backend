{
  "swagger": "2.0",
  "info": {
    "title": "Artists Administration API",
    "version": "1.0.0",
    "description": "## API of Artists Administration Services\n\nThis specification describes the endpoints, request/response model of the Artist Administration API. This API provides REST resources to manage artists of Movies application.\n\nThe resources should only be used over HTTPS (SSL) and can be accessed via the following base URL:\n\n```\n  https://movieapp.com/api/v1/\n```\n\n## API usage guidelines\n\nThis section describes general rules and guidelines for using REST based services offered by Movies Application.\n\n  * All resources can only be accessed via HTTPS and a respective HTTP Basic Authentication header is also required.\n  * Movies Application reserves the right to add new parameters without further notice (in request and response).\n  * Movies Application reserves the right to add new error codes without further notice. Movies Application will thereby stick to the HTTP STATUS CODES as defined by W3C.\n  * Movies Application reserves the right to enhance enumerations by new values.\n  * Movies Application reserves the right to increase the \"maxItem\" settings of arrays without further notice.\n  \nEach consumer needs to tolerant about changes to the API as much as possible ([see Tolerant Reader Pattern](http://martinfowler.com/bliki/TolerantReader.html))\n\n## Business definitions\nArtist Administration APIs can only be called by authorized users who has rights with required permissions to manage artists. These APIs can be used to create new artist, modify an existing artist, delete an existing artist.\n## Release Notes \n### 1.0.0\n* Initial version\n"
  },
  "host": "movieapp.com",
  "schemes": [
    "http",
    "https"
  ],
  "basePath": "/api/v1/admin/artists",
  "tags": [
    {
      "name": "API#005 Artists",
      "description": "All operations marked with 'API#005 Artists' are relevant to artist Administration use case"
    }
  ],
  "paths": {
    "/artists": {
      "post": {
        "operationId": "createArtist",
        "tags": [
          "API#005 Artists"
        ],
        "security": [
          {
            "Authorization": [

            ]
          }
        ],
        "summary": "Artist Administration - Create new Artist",
        "description": "API to create new artist in Movies application\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          },
          {
            "in": "body",
            "name": "CreateArtistRequest",
            "description": "Request containing new artist details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateArtistRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "CREATED - Artist has been created successfully",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              },
              "location": {
                "type": "string",
                "description": "Location of the new resource which was created by this request"
              }
            },
            "schema": {
              "$ref": "#/definitions/CreateArtistResponse"
            }
          },
          "400": {
            "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED - user has provided wrong credentials",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "403": {
            "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "422": {
            "description": "UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          }
        }
      },
      "get": {
        "operationId": "getArtists",
        "tags": [
          "API#005 Artists"
        ],
        "security": [
          {
            "Authorization": [

            ]
          }
        ],
        "summary": "Artist Administration - Get all Artists",
        "description": "API to get all artists of Movies application\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          },
          {
            "in": "query",
            "name": "page",
            "type": "integer",
            "required": false,
            "description": "query to set the position of the records to be fetched from"
          },
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "required": false,
            "description": "query to limit the number of records per fetch"
          },
          {
            "in": "query",
            "name": "type",
            "$ref": "#/definitions/ArtistRoleType",
            "required": false,
            "description": "query to filter the results based on specified role type"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Fetched all artists",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            },
            "schema": {
              "$ref": "#/definitions/ArtistsSummaryResponse"
            }
          },
          "400": {
            "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED - user has provided wrong credentials",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "403": {
            "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "422": {
            "description": "UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          }
        }
      }
    },
    "/artists/{artist_id}": {
      "get": {
        "operationId": "getArtist",
        "tags": [
          "API#005 Artists"
        ],
        "security": [
          {
            "Authorization": [

            ]
          }
        ],
        "summary": "Artist Administration - Get an existing Artist",
        "description": "API to get an existing artist detalis of Movies application\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ArtistId"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Fetched artist details",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            },
            "schema": {
              "$ref": "#/definitions/ArtistType"
            }
          },
          "400": {
            "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED - user has provided wrong credentials",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "403": {
            "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "404": {
            "description": "NOT FOUND - Artist (resource) does not exist",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateArtist",
        "tags": [
          "API#005 Artists"
        ],
        "security": [
          {
            "Authorization": [

            ]
          }
        ],
        "summary": "Artist Administration - Update an existing Artist",
        "description": "API to update an existing artist details in Movies application\n",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ArtistId"
          },
          {
            "$ref": "#/parameters/Authorization"
          },
          {
            "in": "body",
            "name": "UpdateArtistRequest",
            "description": "Request containing modified artist details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateArtistRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Artist has been updated successfully",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "400": {
            "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED - user has provided wrong credentials",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "403": {
            "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "404": {
            "description": "NOT FOUND - Movie (resource) does not exist",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "422": {
            "description": "UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteArtist",
        "tags": [
          "API#005 Artists"
        ],
        "security": [
          {
            "Authorization": [

            ]
          }
        ],
        "summary": "Artist Administration - Mark an existing Artist as INACTIVE",
        "description": "API to remove an existing Movie\n",
        "parameters": [
          {
            "$ref": "#/parameters/ArtistId"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Artist status has been set to INACTIVE",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "400": {
            "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED - user has provided wrong credentials",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "403": {
            "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "404": {
            "description": "NOT FOUND - Artist (resource) does not exist",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "Authorization": {
      "type": "basic",
      "description": "Bearer authentication (also called token authentication) is an HTTP authentication scheme that involves security tokens called bearer tokens. The name “Bearer authentication” can be understood as “give access to the bearer of this token.”\nThe bearer token is a cryptic string, usually generated by the server in response to a login request. The client must send this token in the Authorization header when making requests to protected resources:\n``` Authorization: Bearer <token>\n```\nSimilarly to Basic authentication, Bearer authentication should only be used over HTTPS (SSL).\nRead https://jwt.io/introduction/ for more information on JWT standard.\n"
    }
  },
  "parameters": {
    "Authorization": {
      "name": "authorization",
      "type": "string",
      "in": "header",
      "required": true,
      "description": "Mandatory user credentials in bearer http authentication scheme format. Refer to the #/securityDefinitions for more information on this header."
    },
    "ArtistId": {
      "name": "artist_id",
      "type": "string",
      "format": "uuid",
      "in": "path",
      "required": true,
      "description": "Unique identifier of Movie in a standard UUID format"
    }
  },
  "definitions": {
    "MoviesSummaryResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "page or position of the fetched movies"
        },
        "limit": {
          "type": "integer",
          "description": "number of movies fetched per this request"
        },
        "total_count": {
          "type": "integer",
          "description": "total number of movies in the database"
        },
        "movies": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/MovieSummaryType"
          },
          "description": "List of movies"
        }
      },
      "required": [
        "page",
        "limit",
        "total_count",
        "movies"
      ],
      "example": {
        "page": 1,
        "limit": 10,
        "total_count": 33,
        "movies": [
          {
            "id": "7d174a25-ba31-45a8-85b4-b06ffc9d5f8f",
            "title": "Sample Movie",
            "storyline": "This is a sample movie",
            "genres": [
              "Drama",
              "Romantic"
            ],
            "duration": 120,
            "poster_url": "www.samplemovie.com/poster",
            "trailer_url": "www.samplemovie.com/trailer",
            "wiki_url": "www.wikipedia.com/samplemovie",
            "release_date": "2018-07-07",
            "censor_board_rating": "U",
            "critics_rating": 4.0,
            "status": "RELEASED"
          },
          {
            "id": "8d174a25-da31-55a8-85b4-c06ffc9d5f8f",
            "title": "Another Sample Movie",
            "storyline": "This is another sample movie",
            "genres": [
              "Comedy"
            ],
            "duration": 160,
            "poster_url": "www.anothersamplemovie.com/poster",
            "trailer_url": "www.anothersamplemovie.com/trailer",
            "wiki_url": "www.wikipedia.com/anothersamplemovie",
            "release_date": "2018-08-07",
            "censor_board_rating": "U",
            "critics_rating": 3.0,
            "status": "PUBLISHED"
          }
        ]
      }
    },
    "MovieSummaryType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier of the movie in a standard UUID format"
        },
        "title": {
          "type": "string",
          "description": "Title of the movie"
        },
        "storyline": {
          "type": "string",
          "description": "Storyline of the movie"
        },
        "genres": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Genres of the movie"
        },
        "duration": {
          "type": "integer",
          "description": "Duration (in minutes) of the movie"
        },
        "poster_url": {
          "type": "string",
          "description": "Poster URL of the movie"
        },
        "trailer_url": {
          "type": "string",
          "description": "Trailer URL of the movie"
        },
        "wiki_url": {
          "type": "string",
          "description": "Wiki URL of the movie"
        },
        "release_date": {
          "description": "Release date of the project",
          "$ref": "#/definitions/FullDateType"
        },
        "censor_board_rating": {
          "$ref": "#/definitions/CensorBoardRatingType"
        },
        "critics_rating": {
          "type": "number",
          "format": "float",
          "description": "Critics Rating of the movie"
        },
        "status": {
          "$ref": "#/definitions/MovieStatusType"
        },
        "artists": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ArtistType"
          },
          "description": "List of artists"
        }
      },
      "required": [
        "title",
        "storyline",
        "genres",
        "duration",
        "poster_url",
        "trailer_url",
        "release_date",
        "censor_board_rating",
        "critics_rating",
        "status"
      ],
      "example": {
        "title": "Sample Movie",
        "storyline": "This is a sample movie",
        "genres": [
          "Drama",
          "Romantic"
        ],
        "duration": 120,
        "poster_url": "www.samplemovie.com/poster",
        "trailer_url": "www.samplemovie.com/trailer",
        "wiki_url": "www.wikipedia.com/samplemovie",
        "release_date": "2018-07-07",
        "censor_board_rating": "U",
        "critics_rating": 4.0,
        "status": "RELEASED"
      }
    },
    "MovieOperationsRequest": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MovieOperationRequest"
      }
    },
    "MovieOperationRequest": {
      "type": "object",
      "properties": {
        "op": {
          "type": "string",
          "description": "Type of operation",
          "enum": [
            "replace"
          ]
        },
        "path": {
          "type": "string",
          "description": "Resource path whose state to be modified",
          "enum": [
            "status",
            "release_date"
          ]
        },
        "value": {
          "type": "string",
          "description": "New state value to be updated to the resource"
        }
      },
      "example": [
        {
          "op": "replace",
          "path": "status",
          "value": "CLOSED"
        }
      ]
    },
    "CreateArtistRequest": {
      "type": "object",
      "properties": {
        "first_name": {
          "type": "string",
          "description": "First name of an artist"
        },
        "last_name": {
          "type": "string",
          "description": "Last name of an artist"
        },
        "role_type": {
          "type": "string",
          "description": "Role of an artist",
          "$ref": "#/definitions/ArtistRoleType"
        },
        "profile_description": {
          "type": "string",
          "description": "Profile description of an artist"
        },
        "profile_url": {
          "type": "string",
          "description": "Profile URL of an artist"
        },
        "wiki_url": {
          "type": "string",
          "description": "Wikipedia URL of an artist"
        }
      },
      "required": [
        "first_name",
        "last_name",
        "role_type",
        "profile_url"
      ],
      "example": {
        "first_name": "James",
        "last_name": "Bond",
        "role_type": "ACTOR",
        "profile_url": "www.actor.com/poster",
        "profile_description": "This is sample actor",
        "wiki_url": "www.actor.com/wiki"
      }
    },
    "CreateArtistResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier in a standard UUID format generated by API backend"
        },
        "status": {
          "$ref": "#/definitions/ArtistStatusType"
        }
      },
      "required": [
        "id",
        "status"
      ],
      "example": {
        "id": "7d174a25-ba31-45a8-85b4-b06ffc9d5f8f",
        "status": "PUBLISHED"
      }
    },
    "UpdateArtistRequest": {
      "type": "object",
      "properties": {
        "first_name": {
          "type": "string",
          "description": "Updated first name of an artist"
        },
        "last_name": {
          "type": "string",
          "description": "Updated last name of an artist"
        },
        "role_type": {
          "type": "string",
          "description": "Updated role of an artist",
          "$ref": "#/definitions/ArtistRoleType"
        },
        "profile_description": {
          "type": "string",
          "description": "Updated profile description of an artist"
        },
        "profile_url": {
          "type": "string",
          "description": "Updated profile URL of an artist"
        },
        "wiki_url": {
          "type": "string",
          "description": "Updated wikipedia URL of an artist"
        }
      },
      "example": {
        "first_name": "James",
        "last_name": "Bond",
        "role_type": "ACTOR",
        "profile_url": "www.actor.com/poster",
        "profile_description": "This is sample actor",
        "wiki_url": "www.actor.com/wiki"
      }
    },
    "ArtistType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier of the movie artist in a standard UUID format generated by API backend"
        },
        "first_name": {
          "type": "string",
          "description": "First name of an artist"
        },
        "last_name": {
          "type": "string",
          "description": "Last name of an artist"
        },
        "role_type": {
          "description": "Role of an artist",
          "$ref": "#/definitions/ArtistRoleType"
        },
        "profile_description": {
          "type": "string",
          "description": "Profile description of an artist"
        },
        "profile_url": {
          "type": "string",
          "description": "Profile URL of an artist"
        },
        "wiki_url": {
          "type": "string",
          "description": "Wikipedia URL of an artist"
        },
        "status": {
          "description": "Status of an artist",
          "$ref": "#/definitions/ArtistStatusType"
        }
      }
    },
    "ArtistsSummaryResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "page or position of the fetched artists"
        },
        "limit": {
          "type": "integer",
          "description": "number of artists fetched per this request"
        },
        "total_count": {
          "type": "integer",
          "description": "total number of artists in the database"
        },
        "artists": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ArtistType"
          },
          "description": "List of artists"
        }
      },
      "required": [
        "total_count",
        "artists"
      ],
      "example": {
        "total_count": 8,
        "artists": [
          {
            "id": "7d174a25-ba31-45a8-85b4-b06ffc9d5f8f",
            "first_name": "Movie",
            "last_name": "Director",
            "role_rype": "DIRECTOR",
            "profile_description": "Director of the movie",
            "profile_url": "www.artistsprofile.com/director",
            "wiki_url": "www.wikipedia.com/director"
          }
        ]
      }
    },
    "FullDateType": {
      "type": "string",
      "format": "full-date",
      "description": "Full date format"
    },
    "ArtistStatusType": {
      "type": "string",
      "enum": [
        "ACTIVE",
        "INACTIVE"
      ],
      "description": "Status of an artist"
    },
    "ArtistRoleType": {
      "type": "string",
      "enum": [
        "DIRECTOR",
        "PRODUCER",
        "ACTOR",
        "CINEMATOGRAPHER",
        "MUSICIAN",
        "STUNTMAN"
      ],
      "description": "Status of the task"
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "Application specific standard error code"
        },
        "message": {
          "type": "string",
          "description": "Error message stating the reason"
        },
        "root_cause": {
          "type": "string",
          "description": "Root cause of the Error"
        }
      },
      "required": [
        "code",
        "message"
      ],
      "example": {
        "code": "ART-001",
        "message": "Artist with identifier does not exist"
      }
    }
  }
}